{"version":3,"sources":["assets/marvel-logo.png","components/Form.js","components/Titles.js","components/Character.js","components/MyTeam.js","components/GetCharacter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","findButton","Form","onSubmit","this","props","getCharacter","type","name","placeholder","className","style","React","Component","logoStyles","Titles","src","logo","alt","Character","member","addToTeam","character","description","thumbnail","path","value","id","onClick","e","divWrapperStyles","teamItemStyles","MyTeam","removeCharacter","team","length","map","index","key","image","GetCharacter","event","newMember","currentTeam","state","slice","push","setState","newTeam","filter","char","console","log","preventDefault","target","elements","publicKey","url","md5","ts","axios","get","then","response","data","results","catch","error","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1ae78c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marvel-logo.d5407d5e.png\";","import React from 'react';\n\nconst findButton = {\n    \"width\": \"50%\",\n    \"backgroundColor\": \"#ed151e\",\n    \"color\": \"white\",\n    \"fontSize\": \"20px\",\n    \"padding\": \"14px 20px\",\n    \"margin\": \"8px 0\",\n    \"border\": \"none\",\n    \"border-radius\": \"4px\",\n    \"cursor\": \"pointer\"\n}\n\nclass Form extends React.Component {\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.props.getCharacter}>\n          <input type=\"text\" name=\"character\" placeholder=\"Enter character here...\" className=\"form\"/>\n          <div>\n          <button className=\"find-button\" style={findButton}>Find your character</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Form;  ","import React from 'react';\nimport logo from '../assets/marvel-logo.png'\n\nconst logoStyles = {\n  \"height\":\"100px\"\n}\nclass Titles extends React.Component {\n  render() {\n    return (\n      <div className=\"title-section\">\n        <img src={logo} className=\"logo\" style={logoStyles} alt=\"logo\"/>\n        <h3 className=\"header__white\">Pick a character</h3>\n      </div>\n    )\n  }\n}\n\nexport default Titles;","import React from 'react';\n\n\nclass Character extends React.Component {\n  onClick(member) {\n    this.props.addToTeam(member)\n  }\n  render() {\n  return (\n    <div>\n      {this.props.character.name && \n        <div className=\"character-tile character-tile__color\">\n          <h2>{this.props.character.name}</h2>\n          <p>{this.props.character.description}</p>\n          <img src={`${this.props.character.thumbnail.path}/portrait_xlarge.jpg`} alt=\"character\"/>\n          <div>\n            <button value={this.props.character.id} className=\"addRemoveButton\" onClick={e => this.onClick(this.props.character)}>Add to Team</button>\n          </div>\n        </div>\n      }\n    </div>  \n  )\n}\n}\n\n\nexport default Character;","import React from 'react';\n\nconst divWrapperStyles = {\n  \"display\": \"flex\",\n  \"justifyContent\":\"space-around\"\n}\n\nconst teamItemStyles = {\n  \"border\": \"1px solid red\",\n  \"margin\": \"auto\",\n  \"padding\": \"30px\"\n}\n\nclass MyTeam extends React.Component {\n  onClick(character) {\n    this.props.removeCharacter(character)\n  }\n  render() {\n  return (\n    <div>\n      {this.props.team.length > 0 && <div className=\"team-container team-container__color\">\n          <h3>My Team</h3>\n          <div className=\"team-wrapper-container\" style={divWrapperStyles}>\n          {this.props.team.map((character,index) => (\n            <div className=\"team-card\" style={teamItemStyles}>\n              <p key={index}>{character.name}</p>\n              <img src={`${character.image}/landscape_amazing.jpg`} alt=\"character\"/>\n              <div>\n                <button className=\"addRemoveButton\" onClick={e => this.onClick(character)}>Remove</button>\n              </div>\n            </div>\n            ))}\n        </div>\n      </div>\n      }\n    </div>   \n    )\n  }\n}\nexport default MyTeam;","import React from 'react';\nimport axios from 'axios';\nimport md5 from 'md5';\nimport Form from './Form';\nimport Titles from'./Titles';\nimport Character from './Character';\nimport MyTeam from './MyTeam';\n\nclass GetCharacter extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      character: [],\n      team: []\n    }\n  }\n\naddToTeam = (event) => {\n  let newMember = {\n    id: event.id,\n    name: event.name,\n    image: event.thumbnail.path\n  }\n  let currentTeam = this.state.team.slice(0);\n  currentTeam.push(newMember);\n  this.setState({team: currentTeam})\n}\n\nremoveCharacter = (character) => {\n  let newTeam = this.state.team.filter(char => {\n    return char !== character\n  })\n  this.setState({\n    team: newTeam\n  })\n  console.log(this.state.team)\n}\ngetCharacter = (event) => {\n  event.preventDefault();\n  let character = event.target.elements.character.value;\n  let baseUrl = `https://gateway.marvel.com/v1/public/characters?name=${character}`\n  const publicKey = \"f8ad949f605c15a6d46e8fe3d0a348fe\"\n  const privateKey = \"42a0734d132d836a5dce3b386b8e70f76478827d\"\n  const ts = 1;\n  const stringToHash = ts + privateKey + publicKey;\n  const hash = md5(stringToHash);\n  const url = baseUrl + '&ts=' + ts + '&apikey=' + publicKey + '&hash=' + hash;\n\n  axios.get(url)\n    .then(response => {\n      const data = response.data.data.results[0]\n      console.log(data)\n      this.setState({\n        character: data\n      })\n    })\n    .catch(error => console.log(error))  \n  }\n  render() {\n    const {character} = this.state;\n    return (\n        <div className=\"input-section\">\n          <Titles />\n          <Form value={this.state.name} getCharacter={this.getCharacter}/> \n          <Character \n            character={character}\n            addToTeam={this.addToTeam}/>\n          <MyTeam \n            team={this.state.team}\n            removeCharacter={this.removeCharacter}/>\n        </div>\n      )\n  }\n}\n\nexport default GetCharacter","import React from 'react';\nimport './App.css'\nimport GetCharacter from './components/GetCharacter';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <GetCharacter />\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}